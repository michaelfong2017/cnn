{"version":3,"sources":["webpack://react-app/./src/components/DropArea.jsx","webpack://react-app/./src/components/ImageTable.jsx"],"names":["DragBox","styled","imagesAtom","atom","key","default","filenamesAtom","DropArea","useRecoilState","images","setImages","filenames","setFilenames","useState","err","setErr","container","useRef","handleFileChosen","file","Promise","resolve","reject","fileReader","FileReader","onload","result","onerror","readAsDataURL","readAllFiles","AllFiles","all","map","fileContents","results","onDrop","e","preventDefault","files","dataTransfer","console","log","length","size","type","includes","Array","from","newFilenames","i","name","push","onDragEnter","onDragLeave","onDragOver","useEffect","current","div","addEventListener","removeEventListener","ref","className","onClick","imageStyle","width","height","ImageRows","ImageRow","InputImage","Output","imageRowsState","selector","get","b","k","imageRows","useRecoilValue","style","marginTop","imageRow","src"],"mappings":"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","file":"976.xxxxxxxx.bundle.js","sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\nimport {\n  useRecoilState,\n  atom\n} from \"recoil\";\nimport styled from \"styled-components\"\n\nconst width = \"300px\";\nconst height = \"300px\";\nconst borderStyle = \"2px dotted #000\";\n\nconst DragBox = styled.div`\n  width: ${width};\n  height: ${height};\n  border: ${borderStyle};\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 20px;\n`\n\nconst imagesAtom = atom({\n  key: 'images',\n  default: []\n})\nconst filenamesAtom = atom({\n  key: 'filenames',\n  default: []\n})\n\nconst DropArea = () => {\n  const [images, setImages] = useRecoilState(imagesAtom)\n  const [filenames, setFilenames] = useRecoilState(filenamesAtom)\n  const [err, setErr] = useState(false)\n\n  const container = useRef(null);\n\n\n  const handleFileChosen = async (file) => {\n    return new Promise((resolve, reject) => {\n      let fileReader = new FileReader();\n      fileReader.onload = () => {\n        resolve(fileReader.result);\n      };\n      fileReader.onerror = reject;\n      fileReader.readAsDataURL(file);\n    });\n  }\n\n\n  const readAllFiles = async (AllFiles) => {\n    const results = await Promise.all(AllFiles.map(async (file) => {\n      const fileContents = await handleFileChosen(file);\n      setImages(images => [...images, fileContents]);\n      return fileContents;\n    }));\n    return results;\n  }\n\n\n\n  const onDrop = (e) => {\n    e.preventDefault();\n    const {\n      dataTransfer: { files },\n    } = e;\n    console.log(\"Files: \", files);\n    const { length } = files;\n\n    if (length === 0) {\n      return false;\n    }\n    const fileTypes = [\n      \"image/jpeg\",\n      \"image/jpg\",\n      \"image/png\",\n      // \"image/gif\",\n      // \"image/x-icon\",\n    ];\n    const { size, type } = files[0];\n\n    if (!fileTypes.includes(type)) {\n      setErr(\"File format must be either png or jpg\");\n      return false;\n    }\n    if (size / 1024 / 1024 > 2) {\n      setErr(\"File size exceeded the limit of 2MB\");\n      return false;\n    }\n    setErr(false);\n\n    console.log(readAllFiles(Array.from(files)))\n\n    // Retrieve and save filenames\n    var newFilenames = []\n    for (var i = 0; i < files.length; i++) {\n      if (!files[i].name) return;\n      newFilenames.push(files[i].name);\n    }\n    setFilenames(filenames => [...filenames, ...newFilenames]);\n    console.log([...filenames, ...newFilenames])\n  };\n  const onDragEnter = (e) => {\n    console.log(\"onDragEnter\");\n    e.preventDefault();\n  };\n  const onDragLeave = (e) => {\n    console.log(\"onDragLeave\");\n    e.preventDefault();\n  };\n  const onDragOver = (e) => {\n    console.log(\"onDragOver\");\n    e.preventDefault();\n  };\n\n  useEffect(() => {\n    console.log(\"DropArea useEffect is called\");\n\n    if (container.current) {\n      let div = container.current;\n      div.addEventListener(\"dragenter\", onDragEnter);\n      div.addEventListener(\"dragleave\", onDragLeave);\n      div.addEventListener(\"dragover\", onDragOver);\n      div.addEventListener(\"drop\", onDrop);\n    }\n    return () => {\n      let div = container.current;\n      div.removeEventListener(\"dragenter\", onDragEnter);\n      div.removeEventListener(\"dragleave\", onDragLeave);\n      div.removeEventListener(\"dragover\", onDragOver);\n      div.removeEventListener(\"drop\", onDrop);\n    };\n  }, []);\n\n  return (\n    <div>\n      {err && <p>{err}</p>}\n      <DragBox ref={container}>\n        Drag images here\n      </DragBox>\n      <div className=\"button-wrapper\">\n        {images && <button onClick={() => {\n          setImages([])\n          setFilenames([])\n        }}>Remove All</button>}\n      </div>\n    </div>\n  );\n};\nexport { DropArea as default, imagesAtom, filenamesAtom };\n","import React, { useEffect } from \"react\";\nimport {\n    useRecoilValue,\n    selector,\n} from \"recoil\";\n\nimport { imagesAtom, filenamesAtom } from \"components/DropArea\"\nimport styled from \"styled-components\"\nimport DropArea from \"components/DropArea\"\n\nconst imageStyle = {\n    width: 300,\n    height: 300,\n};\n\nconst ImageRows = styled.div`\n    display: flex;\n    flex-direction: column-reverse;\n`;\nconst ImageRow = styled.div`\n    display: flex;\n    flex-direction: row;\n    padding-top: 20px;\n    padding-bottom: 20px;\n`;\nconst InputImage = styled.div`\n    display: flex;\n    flex-direction: column;\n`\nconst Output = styled.h3`\n    margin: auto 10%;\n`\n\nconst imageRowsState = selector({\n    key: 'imageRows',\n    get: ({ get }) => {\n        const images = get(imagesAtom);\n        const filenames = get(filenamesAtom);\n\n        const zip = (a, b) => a.map((k, i) => [k, b[i]])\n        return zip(images, filenames)\n    },\n});\n\nconst ImageTable = () => {\n    const imageRows = useRecoilValue(imageRowsState)\n    console.log(imageRows)\n\n    return (\n        <div>\n            <h2 style={{ marginTop: \"15px\" }}>\n                Camouflage clothes VS Normal clothes classification\n            </h2>\n            <DropArea></DropArea>\n            <ImageRows>\n                {imageRows.map((imageRow) => (\n                    <ImageRow>\n                        <InputImage>\n                            <img style={imageStyle} src={imageRow[0]} />\n                            <div>{imageRow[1]}</div>\n                        </InputImage>\n                        <Output>\n                            Camouflage clothes\n                        </Output>\n                    </ImageRow>\n                ))}\n            </ImageRows>\n        </div >\n    );\n}\n\nexport default ImageTable"],"sourceRoot":""}